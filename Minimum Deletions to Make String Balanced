Minimum Deletions to Make String Balanced

You are given a string s consisting only of characters 'a' and 'b'​​​​.
You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
Return the minimum number of deletions needed to make s balanced.

class Solution(object):
    def minimumDeletions(self, s):
        """
        :type s: str
        :rtype: int
        """
        #Count of 'a' characters to the right
        count_a = s.count('a')
        #Minimum deletions needed
        min_deletions = count_a
        #Count of 'b' charaters encountered so far
        count_b = 0
        for char in s:
            if char == 'a':
                count_a -= 1
            else:
                count_b += 1
            #Calculate the current number of deletions needed
            min_deletions = min(min_deletions, count_b + count_a)

        return min_deletions
        
